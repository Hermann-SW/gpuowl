// Copyright Mihai Preda

#include "Trig.h"
#include "log.h"

#include <cassert>

using namespace std;

namespace {

pair<u32, u32> splitTwos(u32 n) {
  int nTwos = 0;
  while (n % 2 == 0) {
    ++nTwos;
    n /= 2;
  }
  return {n, 1u << nTwos};
}

const array<u32, 7> MUL_TAB = {
  9,            //   9 : 1, 3, 9
  11 * 13,      // 143 : 11, 13
  7 * 21,       // 147 : 7,
  15 * 19,      // 285 : 5, 15
  625 * 11,     //  11 : 1, 11
  625 * 3 * 7,  //  21 : 3, 7
  625 * 9 * 13, // 117 : 9, 13
};

array<double, 8> COS[7] {
/* 9 */   {1,-0.0038077177473338575,2.4164524072268794e-06,-6.1341124777301022e-10,8.3417746250225797e-14,-7.0584717738912358e-18,4.0721382482643969e-22,-1.6919074352334798e-26,},
/* 143 */ {1,-1.5082651353809108e-05,3.7914395310092149e-11,-3.8123307049719434e-17,2.0535733802621082e-23,-6.8829557033353699e-30,1.5726316782026116e-36,-2.5487666383700158e-43,},
/* 147 */ {1,-1.4272994471472185e-05,3.395306186377832e-11,-3.2307457617727589e-17,1.6468720082881016e-23,-5.2235052014489976e-30,1.1294228181124433e-36,-1.7340690917912537e-43,},
/* 285 */ {1,-3.7971700527429051e-06,2.4030834015746363e-12,-6.0832775511763575e-19,8.2497283518972138e-26,-6.9612521485946193e-33,4.0052215406851532e-40,-1.6706346039780075e-47,},
/* 6875*/ {1,-6.5253582817119728e-09,7.0967167841179238e-18,-3.0872413093608707e-27,7.1947698823885829e-37,-1.0432991733706781e-46,1.0315240035406233e-56,-7.3740112561300959e-67,},
/*13125*/ {1,-1.7904044265014709e-09,5.3425800173932737e-19,-6.3769192746431585e-29,4.077594447422875e-39,-1.6223413155773464e-49,4.4001529827870884e-60,-8.465534037168851e-71,},
/*73125*/ {1,-5.7679038066122338e-11,5.5447857203886548e-22,-2.1321193775654231e-33,4.3920926687829009e-45,-5.62959241967965e-57,4.9196757473149728e-69,-3.092687669618473e-81,},
};

array<double, 8> SIN[7] {
{0.087266462599716474,   4.877106420722032e-18,-0.00011076201946266205,4.2175050723802824e-08,-7.6471756690855468e-12,8.0884113884997494e-16,-5.5994155932178749e-20,2.7063667699130723e-24,},
{0.005492294848933205, -2.0584448006122426e-20,-2.761278944626035e-08,4.1647407612360722e-14,-2.9912063260820776e-20,1.253203156624991e-26,-3.4364810453922909e-33,6.5792419764737163e-40,},
{0.0053428446489622331, 2.4549457241226296e-19,-2.5419464045524189e-08,3.6281186978912718e-14,-2.4659103852004987e-20,9.776644053115473e-27,-2.5369946093312833e-33,4.5962859041262069e-40,},
{0.0027557830294647309, -2.4023522406397623e-20,-3.4880589304468587e-09,1.3244752912880034e-15,-2.3948847185853837e-22,2.5260507823548698e-29,-1.7438811621898675e-36,8.4054226417956712e-44,},
{0.00011423973285781067,-3.3121342973387882e-21,-2.4848506230142562e-13,1.6214540591684776e-22,-5.0383660323229788e-32,9.1325381489102431e-42,-1.0834545000587956e-51,8.9743438072737341e-62,},
{5.9839860068377013e-05, 1.4918646909341598e-21,-3.5712516782550209e-14,6.3939848128911438e-24,-5.4513422409048865e-34,2.7111403957421508e-44,-8.8250633493841523e-55,2.0056012578569698e-65,},
{1.0740487704580491e-05,-8.1816909041476663e-22,-2.0650033305373864e-16,1.1910740570859907e-27,-3.2714288496280539e-39,5.2414676001083463e-51,-5.4964933286266268e-63,4.0242855680977504e-75,},
};

template<size_t N>
array<double, N> scaleSin(const array<double, N>& v, double f) {
  array<double, N> ret;
  ret.at(0) = v.at(0) * f;
  auto f2 = f * f;
  for (u32 i = 1; i < N; ++i) {
    ret.at(i) = v.at(i) * f;
    f *= f2;
  }
  return ret;
}

template<size_t N>
array<double, N> scaleCos(const array<double, N>& v, double f) {
  array<double, N> ret;
  auto f2 = f * f;
  f = 1;
  for (u32 i = 0; i < N; ++i) {
    ret.at(i) = v.at(i) * f;
    f *= f2;
  }
  return ret;
}

} // namespace

TrigCoefs trigCoefs(u32 n) {
  auto [mid, twos] = splitTwos(n);
  assert(twos >= 1 && (twos & (twos - 1)) == 0 && (twos % 4 == 0));
  assert(mid % 2 == 1);
  assert(mid <= 15 || (mid % 625 == 0 && mid / 625 <= 13));

  double scale = 1.0 / (twos / 4);
  for (u32 i = 0; i < MUL_TAB.size(); ++i) {
    if (MUL_TAB[i] % mid == 0) {
      return {MUL_TAB[i] / mid, scaleSin(SIN[i], scale), scaleCos(COS[i], scale)};
    }
  }
  log("Trig tab not found for %u (%u * %u)\n", n, mid, twos);
  throw "Trig tab not found";
}
