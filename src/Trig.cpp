// Copyright Mihai Preda

#include "Trig.h"

#include <cassert>

using namespace std;

namespace {

pair<u32, u32> splitTwos(u32 n) {
  int nTwos = 0;
  while (n % 2 == 0) {
    ++nTwos;
    n /= 2;
  }
  return {n, 1u << nTwos};
}

array<array<double, 8>, 4> SIN {
/*  1 */ array<double,8>{3.001616997868383e-17,0.78539816339744828,-0.080745512188280633,0.0024903945701897712,-3.6576204162508036e-05,3.1336162897145809e-07,-1.7571554310794377e-09,6.879047180570159e-12,},
/* 11 */ array<double,8>{1.4671256518972155e-18,0.071399833036131663,-6.0665298413433988e-05,1.5463390914616114e-08,-1.8769376100215311e-12,1.328959208010384e-16,-6.1587245780721849e-21,1.9926704748688067e-25,},
/* 45 */ array<double,8>{2.8153189375368346e-19,0.017453292519943295,-8.8609615570129648e-07,1.349601623161729e-11,-9.7883848565167767e-17,4.1412666395326407e-22,-1.1467607005362133e-27,2.2171203532939217e-33,},
/* 91 */ array<double,8>{4.6328828912660961e-19,0.0086307490483236073,-1.0715050365298113e-07,3.9908113544228074e-13,-7.0779727558765602e-19,7.322734477955368e-25,-4.9585549406367417e-31,2.344299896829945e-37,},
};

array<array<double, 8>, 5> COS {
/*   1 */ array<double, 8>{1,-0.30842513753404244,0.01585434424381495,-0.00032599188692290462,3.5908604327455616e-06,-2.4611341753778022e-08,1.1498721935761723e-10,-3.8029376643162443e-13,},
/*   9 */ array<double, 8>{1,-0.0038077177473338575,2.4164524072268794e-06,-6.1341124777301022e-10,8.3417746250225797e-14,-7.0584717738912358e-18,4.0721382482643969e-22,-1.6919074352334798e-26,},
/*  25 */ array<double, 8>{1,-0.00049348022005446795,4.0587121264168328e-08,-1.3352627688624843e-12,2.3533063075963436e-17,-2.5806900633569566e-22,1.9296558223279107e-27,-1.0449707383625745e-32,},
/* 105 */ array<double, 8>{1,-2.7975069164085482e-05,1.3043408245589062e-10,-2.4326016520102345e-16,2.4304356860519656e-22,-1.5109231317475189e-28,6.4030936371623083e-35,-1.9255995905967216e-41,},
/* 143 */ array<double, 8>{1,-1.5082651353809108e-05,3.7914395310092149e-11,-3.8123307049719434e-17,2.0535733802621082e-23,-6.8829557033353699e-30,1.5726316782026116e-36,-2.5487666383700158e-43,},
};

const pair<u32, u32> SIN_TAB[8] = {{11, 1}, {15, 2}, {9, 2}, {13, 3}, {5, 2},  {1, 1}, {7, 3}, {3, 2}};
const pair<u32, u32> COS_TAB[8] = {{9, 1}, {3, 1}, {5, 2}, {15, 3}, {1, 1}, {13, 4}, {11, 4}, {7, 3}};

template<size_t N>
array<double, N> scaleSin(const array<double, N>& v, double f) {
  array<double, N> ret;
  ret.at(0) = v.at(0) * f;
  auto f2 = f * f;
  for (u32 i = 1; i < N; ++i) {
    ret.at(i) = v.at(i) * f;
    f *= f2;
  }
  return ret;
}

template<size_t N>
array<double, N> scaleCos(const array<double, N>& v, double f) {
  array<double, N> ret;
  auto f2 = f * f;
  f = 1;
  for (u32 i = 0; i < N; ++i) {
    ret.at(i) = v.at(i) * f;
    f *= f2;
  }
  return ret;
}

} // namespace

TrigCoefs trigCoefs(u32 n) {
  auto [mid, twos] = splitTwos(n);
  assert(twos >= 1 && (twos & (twos - 1)) == 0 && (twos % 4 == 0));
  assert(mid % 2 != 0 && 1 <= mid && mid <= 15);

  u32 pos = (mid - 1) / 2;


  assert(pos <= 7);
  auto [sinMul, sinPos] = SIN_TAB[pos];
  // const auto& sinTab = SIN.at(sinPos);

  auto [cosMul, cosPos] = COS_TAB[pos];
  // const auto& cosTab = COS.at(cosPos);

  return {sinMul, cosMul, scaleSin(SIN.at(sinPos), 1.0/(twos / 4)), scaleCos(COS.at(cosPos), 1.0/(twos / 4))};
}
